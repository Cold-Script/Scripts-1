repeat task.wait() until game:IsLoaded()
local SCRIPT_START_TIME = tick()

-- Script Vars
local ScriptVersion = "1.0.0"
local GameScript = "Cartoon Network"
local ScriptTitle = "AlpHub (v"..ScriptVersion..") | "..GameScript.." > "..game:GetService("Players").LocalPlayer.DisplayName

local ScriptLoaded = false
local isPlayerDead = false

-- exploit vars
local queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
local getassetfunc = getcustomasset or getsynasset
local isnetowner = isnetworkowner or function(part) return part.ReceiveAge == 0 end

-- Vars
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MinigameRemotes = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("MinigameService"):WaitForChild("RF")
local RunService = game:GetService("RunService")
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- GUI
local Repository = 'https://raw.githubusercontent.com/mstudio45/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(Repository .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(Repository .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(Repository .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = ScriptTitle,
    Center = true,
    AutoShow = true,
    Resizable = true,
    ShowCustomCursor = true,
    TabPadding = 0,
    MenuFadeTime = 0
})

-- Main Script Variables
local Script = {
    Connections = {},
    Functions = {
        Notify = function(message,timeArg)
            local notif = Instance.new("Sound")
            notif.Parent = game:GetService("SoundService")
            notif.SoundId = "rbxassetid://4590657391"
            notif.Volume = 1
            notif.PlayOnRemove = true
            notif:Destroy()
        
            Library:Notify(message, timeArg or 5)
        end,
        Log = function(message)
            print("Alphub (v"..ScriptVersion..") >",message)
        end,
        DisconnectConnection = function(RBXScriptConnection)
			if RBXScriptConnection == nil then return end
			if RBXScriptConnection and typeof(RBXScriptConnection) == "RBXScriptConnection" then
				RBXScriptConnection:Disconnect()
				RBXScriptConnection = nil
			end
		end
    },
    GUIElements = {
        Tabs = {},
        Groupboxes = {Tabs={},TabBoxes={}},
        Toggles = {},
        Keybinds = {},
        Colorpickers = {},
        Misc = {}
    }
}

Script.Functions.Log("Loading...")

-- UI Code
Script.GUIElements.Tabs.Main = Window:AddTab('Main')

-- Tabboxes
Script.GUIElements.Groupboxes.TabBoxes.Automation = Script.GUIElements.Tabs.Main:AddLeftTabbox()
Script.GUIElements.Groupboxes.TabBoxes.Player = Script.GUIElements.Tabs.Main:AddLeftTabbox()

-- Tabbox Tabs
Script.GUIElements.Groupboxes.Tabs.Automation = Script.GUIElements.Groupboxes.TabBoxes.Automation:AddTab('Automation')
Script.GUIElements.Groupboxes.Tabs.Player = Script.GUIElements.Groupboxes.TabBoxes.Player:AddTab('Player')

-- Automation Tab
Script.GUIElements.Toggles.AutoFarmToggle = Script.GUIElements.Groupboxes.Tabs.Automation:AddToggle('AutoFarmToggle', {
    Text = 'Auto Farm',
    Default = false,
    Tooltip = 'coin farm'
})

Script.GUIElements.Toggles.AutoMinigameToggle = Script.GUIElements.Groupboxes.Tabs.Automation:AddToggle('AutoMinigameToggle', {
    Text = 'Auto Minigame',
    Default = false,
    Tooltip = 'Automatically does the minigame'
})

Script.GUIElements.Toggles.FastMinigameToggle = Script.GUIElements.Groupboxes.Tabs.Automation:AddToggle('FastFarmMinigame', {
    Text = 'Fast Minigame farm',
    Default = false,
    Tooltip = 'Makes minigame farm faster'
})

Script.GUIElements.Misc.AutoMinigameDropDown = Script.GUIElements.Groupboxes.Tabs.Automation:AddDropdown('AutoMingiameDropdown', {
    Values = { 'Bike','Trike' },
    Default = 1,
    Multi = false,

    Text = 'Auto Minigame',
    Tooltip = 'Which minigame you want to grind in'
})

--[[

-- This script was generated by Hydroxide's RemoteSpy: https://github.com/Upbolt/Hydroxide

local ohString1 = "Bike"

game:GetService("ReplicatedStorage").Packages.Knit.Services.MinigameService.RF.StartMinigame:InvokeServer(ohString1)
]]


-- script code

Script.GUIElements.Toggles.AutoMinigameToggle:OnChanged(function(Value)
    if not ScriptLoaded or isPlayerDead then return end

    while Script.GUIElements.Toggles.AutoMinigameToggle.Value and task.wait() and not isPlayerDead do
        game:GetService("ReplicatedStorage").Packages.Knit.Services.MinigameService.RE.ConfirmMinigame:FireServer("Bike")
        MinigameRemotes.StartMinigame:InvokeServer(Script.GUIElements.Misc.AutoMinigameDropDown.Value)
        Script.Functions.Notify("Started minigame, waiting for timer to finish!")
        local startTime = tick()
        local endTime = startTime + 5.25
        repeat task.wait() until game:GetService("Players").LocalPlayer.PlayerGui.PlayerUI.Base.MinigameTimer.Frame.Visible == true or tick() > endTime


        local time = tick()
        Script.Functions.Notify("Starting auto minigame...")
        local v = workspace.Minigames.Bike.Checkpoints["01"]
        task.spawn(function()
            if (Script.GUIElements.Toggles.FastMinigameToggle.Value) then
                -- make a loop that loops print untill 0.25 seconds have passed
                local startTime = tick()
                local endTime = startTime + 0.25
                repeat task.wait()
                    character:PivotTo(v.CFrame)
                until tick() > endTime
            else
                local tween = TweenService:Create(character.HumanoidRootPart, TweenInfo.new(0.215), {CFrame = v.CFrame})
                tween:Play()
                tween.Completed:Wait()
    
                local startTime = tick()
                local endTime = startTime + 0.25
                repeat task.wait()
                    character:PivotTo(v.CFrame)
                until tick() > endTime
            end
        end)

                
        task.spawn(function()
            for i=1,5 do
                firetouchinterest(character.HumanoidRootPart, v, 1)
                task.wait(0.175)
                firetouchinterest(character.HumanoidRootPart, v, 0)
            end
        end)
        
        for i=2,#workspace.Minigames.Bike.Checkpoints:GetChildren() do
            local v = workspace.Minigames.Bike.Checkpoints[string.format("%02d", i)]
            task.spawn(function()
                if (Script.GUIElements.Toggles.FastMinigameToggle.Value) then
                    -- make a loop that loops print untill 0.25 seconds have passed
                    local startTime = tick()
                    local endTime = startTime + 0.15
                    repeat task.wait()
                        character:PivotTo(v.CFrame)
                    until tick() > endTime
                else
                    local tween = TweenService:Create(character.HumanoidRootPart, TweenInfo.new(0.215), {CFrame = v.CFrame})
                    tween:Play()
                    tween.Completed:Wait()
        
                    local startTime = tick()
                    local endTime = startTime + 0.15
                    repeat task.wait()
                        character:PivotTo(v.CFrame)
                    until tick() > endTime
                end
            end)
    
            task.spawn(function()
                for i=1,5 do
                    firetouchinterest(character.HumanoidRootPart, v, 1)
                    task.wait(0.175)
                    firetouchinterest(character.HumanoidRootPart, v, 0)
                end
            end)

            task.wait(0.9)
        end

        MinigameRemotes.EndMinigame:InvokeServer(Script.GUIElements.Misc.AutoMinigameDropDown.Value, true)
        ReplicatedStorage.Packages.Knit.Services.ProgressionDataService.RF.ShouldGiveMinigameRewards:InvokeServer(Script.GUIElements.Misc.AutoMinigameDropDown.Value)

        Script.Functions.Notify("Finished Lap in "..tostring((math.floor((tick() - time)*100))/100).." seconds!...")
        task.wait(0.25)
        
    end
end)

Script.Connections["MainRSLoop"] = RunService.RenderStepped:Connect(function()
    if Script.GUIElements.Toggles.AutoFarmToggle.Value and (not isPlayerDead or not ScriptLoaded) then
        for i,v in pairs(workspace.Coins:GetChildren()) do
            task.wait()
            task.spawn(function()
                firetouchinterest(character.HumanoidRootPart, v, 1)
                task.wait(0.15)
                firetouchinterest(character.HumanoidRootPart, v, 0)
            end)
        end
    end
end)


-- Connections
function onDeath()
    isPlayerDead = true
end

function onCharacterAdded(chr)
    isPlayerDead = false
    character = chr

    Script.Functions.DisconnectConnection(Script.Connections.Died)
    Script.Connections.Died = character:WaitForChild("Humanoid").Died:Connect(onDeath)
end

Script.Connections.CharacterAdded = player.CharacterAdded:Connect(onCharacterAdded)
Script.Connections.Died = character:WaitForChild("Humanoid").Died:Connect(onDeath)

-- Watermark
Library:SetWatermarkVisibility(true)

local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter += 1;

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter;
        FrameTimer = tick();
        FrameCounter = 0;
    end;

    Library:SetWatermark(('Alphub ('..ScriptVersion..') | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ));
end);

-- Savemanager
Library:OnUnload(function()
    WatermarkConnection:Disconnect()

    for i,v in pairs(Script.Connections) do
        Script.Functions.DisconnectConnection(v)
    end

    print('Unloaded!')
    Library.Unloaded = true
end)

Script.GUIElements.Tabs.Config = Window:AddTab('Config')
local MenuGroup = Script.GUIElements.Tabs.Config:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

MenuGroup:AddToggle("ShowKeybinds", {Text = "Show Keybinds Menu", Default = false})
Toggles.ShowKeybinds:OnChanged(function(Value) Library.KeybindFrame.Visible = Value end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()

ThemeManager:SetFolder('Alphub')
SaveManager:SetFolder('Alphub/'..GameScript)

SaveManager:BuildConfigSection(Script.GUIElements.Tabs.Config)

ThemeManager:ApplyToTab(Script.GUIElements.Tabs.Config)

SaveManager:LoadAutoloadConfig()

ScriptLoaded = true
local ScriptEnd = tick()
local ScriptTime = (math.floor((ScriptEnd - SCRIPT_START_TIME)*100))/100
Script.Functions.Log("Successfully loaded Alphub in "..ScriptTime.." seconds!")
Script.Functions.Notify("Successfully loaded Alphub in "..ScriptTime.." seconds!")
